function malware_hist()
% assemble features, just pure bag of bytes histogram
train_data_path = '/run/media/kewang/externalHD/Projects/kaggle/malware/train';
test_data_path = '/run/media/kewang/externalHD/Projects/kaggle/malware/test';
train_label_file = ...
    '/run/media/kewang/externalHD/Projects/kaggle/malware/sortTrainLabels.csv';

[train_sample_names, train_labels] = read_train_label(train_label_file);
assert(size(train_sample_names, 1) == size(train_labels, 1));

train_sample_number = length(train_labels);

train_bag_of_bytes = zeros(train_sample_number, 257);
% 256 hex values, with '??' representing unknown values
train_sample_hist_files = dir(fullfile(train_data_path, '*.hist'));
test_sample_hist_files = dir(fullfile(test_data_path, '*.hist'));
assert(length(train_sample_hist_files) == train_sample_number);

% train features
parfor i = 1 : train_sample_number
    [~, filename, ~] = fileparts(train_sample_hist_files(i).name);
    assert(strcmp(filename, train_sample_names(i, :)));
    train_bag_of_bytes(i, :) = importdata(fullfile(train_data_path, ...
        train_sample_hist_files(i).name));
end

% test features
test_sample_number = length(test_sample_hist_files);
test_bag_of_bytes = zeros(test_sample_number, 257);

parfor i = 1 : test_sample_number
    test_bag_of_bytes(i, :) = importdata(fullfile(test_data_path, ...
        test_sample_hist_files(i).name));
end


end

function [filenames, labels] = read_train_label(train_label_file)
if ~exist(train_label_file, 'file')
    error('%s not found.', train_label_file);
end

filenames = [];
labels = [];

train_f_id = fopen(train_label_file, 'r');

% assemble labels
tline = fgets(train_f_id);
while ischar(tline)
    tokens = strsplit(tline, ',');
    filenames = [filenames; tokens{1}(2:end-1)];
    labels = [labels; int32(str2double(tokens{2}(1)))];
    tline = fgets(train_f_id);
end

fclose(train_f_id);
end