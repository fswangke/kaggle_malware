__author__ = 'kewang'

import glob
import numpy
import os
import subprocess
import sys
import time
import multiprocessing

instructions = ['add', 'and', 'call', 'cmp', 'dec', 'idiv', 'imul', 'inc', 'je', 'jg', 'jge', 'jl', 'jle', 'jmp',
                'jne', 'jz', 'lea', 'mov', 'neg', 'not', 'or', 'pop', 'push', 'ret', 'shl', 'shr', 'xor']


def get_2_gram(filename):
    one_gram_hist = numpy.zeros((1, len(instructions)))
    two_gram_hist = numpy.zeros((len(instructions), len(instructions)))
    instruction_stream = []
    with open(filename, encoding='latin-1') as f:
        # get the instruction stream
        contents = f.read().split()
        for token in contents:
            for idx in range(len(instructions)):
                if token.startswith(instructions[idx]):
                    instruction_stream.append(token)
                    one_gram_hist[0, idx] += 1
                    break

        # build the 2-gram histogram
        for token_idx in range(len(instruction_stream) - 1):
            first_token = instruction_stream[token_idx]
            second_token = instruction_stream[token_idx + 1]

            first_idx = -1
            for idx in range(len(instructions)):
                if first_token.startswith(instructions[idx]):
                    first_idx = idx
                    break

            second_idx = -1
            for idx in range(len(instructions)):
                if second_token.startswith(instructions[idx]):
                    second_idx = idx
                    break

            two_gram_hist[first_idx, second_idx] += 1

    two_gram_hist = two_gram_hist.reshape((1, len(instructions) ** 2))
    # print(one_gram_hist, two_gram_hist)

    return one_gram_hist, two_gram_hist


def hist_driver(files):
    print(files)
    filepath, filename = os.path.split(files)
    filebase, fileext = os.path.splitext(filename)

    one_gram_hist, two_gram_hist = get_2_gram(files)
    numpy.savetxt(os.path.join(filepath, filebase + '_1_gram.hist'), one_gram_hist)
    numpy.savetxt(os.path.join(filepath, filebase + '_2_gram.hist'), two_gram_hist)
    pass

if __name__ == '__main__':
    if len(sys.argv) < 2:
        data_path = '/run/media/kewang/externalHD/Projects/kaggle/malware/train'
    else:
        data_path = os.path.join('/run/media/kewang/externalHD/Projects/kaggle/malware/', sys.argv[1])


    files = glob.glob(os.path.join(data_path, '*.asm'))
    files.sort()
    train_sample_number = len(files)

    p = multiprocessing.Pool(processes=8)
    p.map(hist_driver, files)
    # get_2_gram('./0A32eTdBKayjCWhZqDOQ.asm')


