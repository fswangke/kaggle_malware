function malware_features()

% features: file sizes, file size ratio, bag of byte histogram, ...
%           1-gram instruction histogram, ...
%           2-gram instruction histogram

load('malware_features.mat');
%  Name                        Size                Bytes  Class     Attributes
%
%   test_bag_of_bytes       10873x257            22354888  double              
%   train_bag_of_bytes      10868x257            22344608  double              
%   train_labels            10868x1                 43472  int32               

train_data_path = '/run/media/kewang/externalHD/Projects/kaggle/malware/train';
test_data_path = '/run/media/kewang/externalHD/Projects/kaggle/malware/test';

train_sample_asm_files = dir(fullfile(train_data_path, '*.asm'));
train_sample_bytes_files = dir(fullfile(train_data_path, '*.bytes'));

[train_one_gram, train_two_gram] = assemble_grams(train_sample_asm_files,...
    fullfile(train_data_path, 'grams'));


train_asm_sizes = extractfield(train_sample_asm_files, 'bytes')';
train_byte_sizes = extractfield(train_sample_bytes_files, 'bytes')';

train_feature = cat(2, ...
    train_bag_of_bytes, ...
    train_asm_sizes, ...
    train_byte_sizes, ...
    train_asm_sizes ./ train_byte_sizes, ...
    train_one_gram, ...
    train_two_gram);

test_sample_asm_files = dir(fullfile(test_data_path, '*.asm'));
test_sample_bytes_files = dir(fullfile(test_data_path, '*.bytes'));

[test_one_gram, test_two_gram] = assemble_grams(test_sample_asm_files, ...
    fullfile(test_data_path, 'grams'));

test_asm_sizes = extractfield(test_sample_asm_files, 'bytes')';
test_byte_sizes = extractfield(test_sample_bytes_files, 'bytes')';

test_feature = cat(2, ...
    test_bag_of_bytes, ...
    test_asm_sizes, ...
    test_byte_sizes, ...
    test_asm_sizes ./ test_byte_sizes, ...
    test_one_gram, ...
    test_two_gram);

features = [train_feature; test_feature];
features = normc(log(features + 1));

train_feature = features(1: length(train_sample_asm_files), :);
test_feature = features(length(train_sample_asm_files) + 1 : end, :);

save('malware_feature3.mat', ...
    'train_feature', ...
    'test_feature', ...
    'test_asm_sizes', ...
    'test_bag_of_bytes', ...
    'test_byte_sizes', ...
    'test_one_gram', ...
    'test_two_gram', ...
    'train_asm_sizes', ...
    'train_bag_of_bytes', ...
    'train_byte_sizes', ...
    'train_one_gram', ...
    'train_two_gram');
end

function [one_gram, two_gram] = assemble_grams(asm_filenames, data_path)
one_gram = zeros(length(asm_filenames), 27);
two_gram = zeros(length(asm_filenames), 27 * 27);
parfor i = 1 : length(asm_filenames)
    [~, basename, ~] = fileparts(asm_filenames(i).name);
    disp(i);
    one_gram_file = fullfile(data_path, [basename, '_1_gram.hist']);
    two_gram_file = fullfile(data_path, [basename, '_2_gram.hist']);

    one_gram(i, :) = importdata(one_gram_file);
    two_gram(i, :) = importdata(two_gram_file);
end
end
