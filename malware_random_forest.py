from sklearn.ensemble import RandomForestClassifier
import numpy as np
import scipy.io as sio
import sys
import os
import time


def random_classifier(data_path):
    # load mat
    datafile = os.path.join(data_path, 'malware_features.mat')
    # matlab feature variables
    #test_bag_of_bytes       10873x257            22354888  double
    #test_feature            10873x257            22354888  double
    #train_bag_of_bytes      10868x257            22344608  double
    #train_feature           10868x257            22344608  double
    #train_labels            10868x1                 43472  int32

    if os.path.exists(datafile) is False:
        print('Data file %s not found.' % datafile)
        return

    data_numpy = sio.loadmat(datafile)
    # get training and test data
    train_feature = data_numpy['train_feature']
    train_labels = data_numpy['train_labels']
    test_feature = data_numpy['test_feature']

    rf_clf = RandomForestClassifier()
    rf_clf.fit(train_feature, train_labels.ravel())
    test_prediction_probability = rf_clf.predict_proba(test_feature)

    test_sample_number, test_prediction_number = test_prediction_probability.shape

    test_sample_files = []
    test_files = os.listdir('/run/media/kewang/externalHD/Projects/kaggle/malware/test')
    for test_entry in test_files:
        if test_entry.endswith('.hist'):
            test_file_base_name, test_file_ext = os.path.splitext(test_entry)
            test_sample_files.append(test_file_base_name)

    test_sample_files.sort()
    print(test_sample_files)
    print(test_prediction_probability.shape)
    with open('rf_submission.csv', 'w') as fid:
        fid.write('"Id","Prediction1","Prediction2","Prediction3","Prediction4","Prediction5","Prediction6","Prediction7","Prediction8","Prediction9"\n')
        for i in range(test_sample_number):
            fid.write('\"{0}\", {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}\n'.format(test_sample_files[i],
                                                                                      test_prediction_probability[i, 0],
                                                                                      test_prediction_probability[i, 1],
                                                                                      test_prediction_probability[i, 2],
                                                                                      test_prediction_probability[i, 3],
                                                                                      test_prediction_probability[i, 4],
                                                                                      test_prediction_probability[i, 5],
                                                                                      test_prediction_probability[i, 6],
                                                                                      test_prediction_probability[i, 7],
                                                                                      test_prediction_probability[i, 8]
                                                                                      ))

    return



if __name__ == '__main__':
    print('Hello World')
    random_classifier('.')
