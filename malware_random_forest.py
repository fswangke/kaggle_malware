from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import GradientBoostingClassifier
import numpy as np
import scipy.io as sio
import sys
import os
import time

def logloss(pred_train_prob, train_labels):
    return 0


def random_classifier(data_path):
    # load mat
    datafile = os.path.join(data_path, 'malware_features.mat')
    # matlab feature variables
    #test_bag_of_bytes       10873x257            22354888  double
    #test_feature            10873x257            22354888  double
    #train_bag_of_bytes      10868x257            22344608  double
    #train_feature           10868x257            22344608  double
    #train_labels            10868x1                 43472  int32

    if os.path.exists(datafile) is False:
        print('Data file %s not found.' % datafile)
        return

    data_numpy = sio.loadmat(datafile)
    # get training and test data
    train_feature = data_numpy['train_feature']
    train_labels = data_numpy['train_labels']
    test_feature = data_numpy['test_feature']

    rf_clf = RandomForestClassifier()
    rf_clf.fit(train_feature, train_labels.ravel())
    test_prediction_probability = rf_clf.predict_proba(test_feature)

    print(logloss(test_prediction_probability, train_labels))

    return test_prediction_probability


def gradient_boost_classifier(data_path):
    # load mat
    datafile = os.path.join(data_path, 'malware_features.mat')

    if os.path.exists(datafile) is False:
        print('Data file %s not found.' % datafile)
        return

    data_numpy = sio.loadmat(datafile)
    # get training and test data
    train_feature = data_numpy['train_feature']
    train_labels = data_numpy['train_labels']
    test_feature = data_numpy['test_feature']

    gb_clf = GradientBoostingClassifier()
    gb_clf.fit(train_feature, train_labels.ravel())
    test_prediction_probability = gb_clf.predict_proba(test_feature)

    return test_prediction_probability


def generate_submission(submission_filename, test_sample_filename, prediction_probability):
    test_sample_number, test_prediction_number = prediction_probability.shape
    with open(submission_filename, 'w') as fid:
        fid.write('"Id","Prediction1","Prediction2","Prediction3","Prediction4","Prediction5","Prediction6","Prediction7","Prediction8","Prediction9"\n')
        for i in range(test_sample_number):
            fid.write('\"{0}\", {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}\n'.format(test_sample_filename[i],
                                                                                      prediction_probability[i, 0],
                                                                                      prediction_probability[i, 1],
                                                                                      prediction_probability[i, 2],
                                                                                      prediction_probability[i, 3],
                                                                                      prediction_probability[i, 4],
                                                                                      prediction_probability[i, 5],
                                                                                      prediction_probability[i, 6],
                                                                                      prediction_probability[i, 7],
                                                                                      prediction_probability[i, 8]
            ))

    return

if __name__ == '__main__':
    test_sample_files = []
    test_files = os.listdir('/run/media/kewang/externalHD/Projects/kaggle/malware/test')
    for test_entry in test_files:
        if test_entry.endswith('.hist'):
            test_file_base_name, test_file_ext = os.path.splitext(test_entry)
            test_sample_files.append(test_file_base_name)

    test_sample_files.sort()

    '''
    print('Hello random forest')
    rf_pred_proba = random_classifier('.') + 0.0001
    generate_submission('rf_submission.csv', test_sample_files, rf_pred_proba)
    '''

    print('Hello gradient boost')
    gb_pred_proba = gradient_boost_classifier('.')
    generate_submission('gb_submission.csv', test_sample_files, gb_pred_proba)
